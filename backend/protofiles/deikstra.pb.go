// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: deikstra.proto

package protofiles

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskEvalStatusCode int32

const (
	TaskEvalStatusCode_TE_IQS TaskEvalStatusCode = 0  // In Queue State
	TaskEvalStatusCode_TE_ICS TaskEvalStatusCode = 1  // In Compilation State
	TaskEvalStatusCode_TE_ITS TaskEvalStatusCode = 2  // In Testing State
	TaskEvalStatusCode_TE_CE  TaskEvalStatusCode = 3  // Compilation Error
	TaskEvalStatusCode_TE_TLE TaskEvalStatusCode = 4  // Time Limit Exceeded
	TaskEvalStatusCode_TE_MLE TaskEvalStatusCode = 5  // Memory Limit Exceed
	TaskEvalStatusCode_TE_OK  TaskEvalStatusCode = 6  // Accepted
	TaskEvalStatusCode_TE_PT  TaskEvalStatusCode = 7  // Partial solution
	TaskEvalStatusCode_TE_WA  TaskEvalStatusCode = 8  // Wrong Answer
	TaskEvalStatusCode_TE_RE  TaskEvalStatusCode = 9  // Runtime Error
	TaskEvalStatusCode_TE_PE  TaskEvalStatusCode = 10 // Presentation Error
	TaskEvalStatusCode_TE_ILE TaskEvalStatusCode = 11 // Idleness Limit Exceeded
	TaskEvalStatusCode_TE_CF  TaskEvalStatusCode = 12 // Check Failed
	TaskEvalStatusCode_TE_SV  TaskEvalStatusCode = 13 // Security Violation
	TaskEvalStatusCode_TE_RJ  TaskEvalStatusCode = 14 // Rejected
	TaskEvalStatusCode_TE_DQ  TaskEvalStatusCode = 15 // Disqualified
	TaskEvalStatusCode_TE_SE  TaskEvalStatusCode = 16 // System Error
)

// Enum value maps for TaskEvalStatusCode.
var (
	TaskEvalStatusCode_name = map[int32]string{
		0:  "TE_IQS",
		1:  "TE_ICS",
		2:  "TE_ITS",
		3:  "TE_CE",
		4:  "TE_TLE",
		5:  "TE_MLE",
		6:  "TE_OK",
		7:  "TE_PT",
		8:  "TE_WA",
		9:  "TE_RE",
		10: "TE_PE",
		11: "TE_ILE",
		12: "TE_CF",
		13: "TE_SV",
		14: "TE_RJ",
		15: "TE_DQ",
		16: "TE_SE",
	}
	TaskEvalStatusCode_value = map[string]int32{
		"TE_IQS": 0,
		"TE_ICS": 1,
		"TE_ITS": 2,
		"TE_CE":  3,
		"TE_TLE": 4,
		"TE_MLE": 5,
		"TE_OK":  6,
		"TE_PT":  7,
		"TE_WA":  8,
		"TE_RE":  9,
		"TE_PE":  10,
		"TE_ILE": 11,
		"TE_CF":  12,
		"TE_SV":  13,
		"TE_RJ":  14,
		"TE_DQ":  15,
		"TE_SE":  16,
	}
)

func (x TaskEvalStatusCode) Enum() *TaskEvalStatusCode {
	p := new(TaskEvalStatusCode)
	*p = x
	return p
}

func (x TaskEvalStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskEvalStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_deikstra_proto_enumTypes[0].Descriptor()
}

func (TaskEvalStatusCode) Type() protoreflect.EnumType {
	return &file_deikstra_proto_enumTypes[0]
}

func (x TaskEvalStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskEvalStatusCode.Descriptor instead.
func (TaskEvalStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_deikstra_proto_rawDescGZIP(), []int{0}
}

type TaskTestStatusCode int32

const (
	TaskTestStatusCode_TT_TLE TaskTestStatusCode = 0  // Time Limit Exceeded
	TaskTestStatusCode_TT_MLE TaskTestStatusCode = 1  // Memory Limit Exceeded
	TaskTestStatusCode_TT_OK  TaskTestStatusCode = 2  // Accepted
	TaskTestStatusCode_TT_PT  TaskTestStatusCode = 3  // Partial solution
	TaskTestStatusCode_TT_WA  TaskTestStatusCode = 4  // Wrong Answer
	TaskTestStatusCode_TT_RE  TaskTestStatusCode = 5  // Runtime Error
	TaskTestStatusCode_TT_PE  TaskTestStatusCode = 6  // Presentation Error
	TaskTestStatusCode_TT_ILE TaskTestStatusCode = 7  // Idleness limit exceeded
	TaskTestStatusCode_TT_IG  TaskTestStatusCode = 8  // Ignored
	TaskTestStatusCode_TT_SV  TaskTestStatusCode = 9  // Security violation
	TaskTestStatusCode_TT_CF  TaskTestStatusCode = 10 // Check Failed
)

// Enum value maps for TaskTestStatusCode.
var (
	TaskTestStatusCode_name = map[int32]string{
		0:  "TT_TLE",
		1:  "TT_MLE",
		2:  "TT_OK",
		3:  "TT_PT",
		4:  "TT_WA",
		5:  "TT_RE",
		6:  "TT_PE",
		7:  "TT_ILE",
		8:  "TT_IG",
		9:  "TT_SV",
		10: "TT_CF",
	}
	TaskTestStatusCode_value = map[string]int32{
		"TT_TLE": 0,
		"TT_MLE": 1,
		"TT_OK":  2,
		"TT_PT":  3,
		"TT_WA":  4,
		"TT_RE":  5,
		"TT_PE":  6,
		"TT_ILE": 7,
		"TT_IG":  8,
		"TT_SV":  9,
		"TT_CF":  10,
	}
)

func (x TaskTestStatusCode) Enum() *TaskTestStatusCode {
	p := new(TaskTestStatusCode)
	*p = x
	return p
}

func (x TaskTestStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskTestStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_deikstra_proto_enumTypes[1].Descriptor()
}

func (TaskTestStatusCode) Type() protoreflect.EnumType {
	return &file_deikstra_proto_enumTypes[1]
}

func (x TaskTestStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskTestStatusCode.Descriptor instead.
func (TaskTestStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_deikstra_proto_rawDescGZIP(), []int{1}
}

type RegisterWorker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerName string `protobuf:"bytes,1,opt,name=worker_name,json=workerName,proto3" json:"worker_name,omitempty"`
	CpuName    string `protobuf:"bytes,2,opt,name=cpu_name,json=cpuName,proto3" json:"cpu_name,omitempty"`
}

func (x *RegisterWorker) Reset() {
	*x = RegisterWorker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deikstra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWorker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorker) ProtoMessage() {}

func (x *RegisterWorker) ProtoReflect() protoreflect.Message {
	mi := &file_deikstra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorker.ProtoReflect.Descriptor instead.
func (*RegisterWorker) Descriptor() ([]byte, []int) {
	return file_deikstra_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterWorker) GetWorkerName() string {
	if x != nil {
		return x.WorkerName
	}
	return ""
}

func (x *RegisterWorker) GetCpuName() string {
	if x != nil {
		return x.CpuName
	}
	return ""
}

type TaskEvalJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    uint64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	TaskCode string `protobuf:"bytes,2,opt,name=task_code,json=taskCode,proto3" json:"task_code,omitempty"`
	LangId   string `protobuf:"bytes,3,opt,name=lang_id,json=langId,proto3" json:"lang_id,omitempty"`
	SrcCode  string `protobuf:"bytes,4,opt,name=src_code,json=srcCode,proto3" json:"src_code,omitempty"`
}

func (x *TaskEvalJob) Reset() {
	*x = TaskEvalJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deikstra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEvalJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEvalJob) ProtoMessage() {}

func (x *TaskEvalJob) ProtoReflect() protoreflect.Message {
	mi := &file_deikstra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEvalJob.ProtoReflect.Descriptor instead.
func (*TaskEvalJob) Descriptor() ([]byte, []int) {
	return file_deikstra_proto_rawDescGZIP(), []int{1}
}

func (x *TaskEvalJob) GetJobId() uint64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *TaskEvalJob) GetTaskCode() string {
	if x != nil {
		return x.TaskCode
	}
	return ""
}

func (x *TaskEvalJob) GetLangId() string {
	if x != nil {
		return x.LangId
	}
	return ""
}

func (x *TaskEvalJob) GetSrcCode() string {
	if x != nil {
		return x.SrcCode
	}
	return ""
}

type TaskEvalStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Types that are assignable to Status:
	//
	//	*TaskEvalStatus_TestRes
	//	*TaskEvalStatus_TaskRes
	Status isTaskEvalStatus_Status `protobuf_oneof:"status"`
}

func (x *TaskEvalStatus) Reset() {
	*x = TaskEvalStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deikstra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEvalStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEvalStatus) ProtoMessage() {}

func (x *TaskEvalStatus) ProtoReflect() protoreflect.Message {
	mi := &file_deikstra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEvalStatus.ProtoReflect.Descriptor instead.
func (*TaskEvalStatus) Descriptor() ([]byte, []int) {
	return file_deikstra_proto_rawDescGZIP(), []int{2}
}

func (x *TaskEvalStatus) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (m *TaskEvalStatus) GetStatus() isTaskEvalStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (x *TaskEvalStatus) GetTestRes() *TaskTestResult {
	if x, ok := x.GetStatus().(*TaskEvalStatus_TestRes); ok {
		return x.TestRes
	}
	return nil
}

func (x *TaskEvalStatus) GetTaskRes() *TaskEvalResult {
	if x, ok := x.GetStatus().(*TaskEvalStatus_TaskRes); ok {
		return x.TaskRes
	}
	return nil
}

type isTaskEvalStatus_Status interface {
	isTaskEvalStatus_Status()
}

type TaskEvalStatus_TestRes struct {
	TestRes *TaskTestResult `protobuf:"bytes,2,opt,name=test_res,json=testRes,proto3,oneof"`
}

type TaskEvalStatus_TaskRes struct {
	TaskRes *TaskEvalResult `protobuf:"bytes,3,opt,name=task_res,json=taskRes,proto3,oneof"`
}

func (*TaskEvalStatus_TestRes) isTaskEvalStatus_Status() {}

func (*TaskEvalStatus_TaskRes) isTaskEvalStatus_Status() {}

type TaskEvalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvalStatus TaskEvalStatusCode `protobuf:"varint,1,opt,name=eval_status,json=evalStatus,proto3,enum=protofiles.TaskEvalStatusCode" json:"eval_status,omitempty"`
	ErrorMsg   string             `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
	Score      int32              `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *TaskEvalResult) Reset() {
	*x = TaskEvalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deikstra_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEvalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEvalResult) ProtoMessage() {}

func (x *TaskEvalResult) ProtoReflect() protoreflect.Message {
	mi := &file_deikstra_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEvalResult.ProtoReflect.Descriptor instead.
func (*TaskEvalResult) Descriptor() ([]byte, []int) {
	return file_deikstra_proto_rawDescGZIP(), []int{3}
}

func (x *TaskEvalResult) GetEvalStatus() TaskEvalStatusCode {
	if x != nil {
		return x.EvalStatus
	}
	return TaskEvalStatusCode_TE_IQS
}

func (x *TaskEvalResult) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *TaskEvalResult) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type TaskTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestStatus TaskTestStatusCode `protobuf:"varint,1,opt,name=test_status,json=testStatus,proto3,enum=protofiles.TaskTestStatusCode" json:"test_status,omitempty"`
	TestId     int32              `protobuf:"varint,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Time       int32              `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Memory     int32              `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty"`
	Stdout     string             `protobuf:"bytes,5,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr     string             `protobuf:"bytes,6,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *TaskTestResult) Reset() {
	*x = TaskTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deikstra_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTestResult) ProtoMessage() {}

func (x *TaskTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_deikstra_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTestResult.ProtoReflect.Descriptor instead.
func (*TaskTestResult) Descriptor() ([]byte, []int) {
	return file_deikstra_proto_rawDescGZIP(), []int{4}
}

func (x *TaskTestResult) GetTestStatus() TaskTestStatusCode {
	if x != nil {
		return x.TestStatus
	}
	return TaskTestStatusCode_TT_TLE
}

func (x *TaskTestResult) GetTestId() int32 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TaskTestResult) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TaskTestResult) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *TaskTestResult) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *TaskTestResult) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type ExecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout string `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *ExecResult) Reset() {
	*x = ExecResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deikstra_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResult) ProtoMessage() {}

func (x *ExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_deikstra_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResult.ProtoReflect.Descriptor instead.
func (*ExecResult) Descriptor() ([]byte, []int) {
	return file_deikstra_proto_rawDescGZIP(), []int{5}
}

func (x *ExecResult) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *ExecResult) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

var File_deikstra_proto protoreflect.FileDescriptor

var file_deikstra_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x65, 0x69, 0x6b, 0x73, 0x74, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x45,
	0x76, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x61,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa3,
	0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x76,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f,
	0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x22, 0x3c, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x2a, 0xd5, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x5f,
	0x49, 0x51, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x5f, 0x49, 0x43, 0x53, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x5f, 0x49, 0x54, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x45, 0x5f, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x5f, 0x54,
	0x4c, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x5f, 0x4d, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x45, 0x5f, 0x50, 0x54, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x45, 0x5f, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x5f, 0x49, 0x4c,
	0x45, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x5f, 0x43, 0x46, 0x10, 0x0c, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x45, 0x5f, 0x53, 0x56, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x5f,
	0x52, 0x4a, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x5f, 0x44, 0x51, 0x10, 0x0f, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x10, 0x10, 0x2a, 0x90, 0x01, 0x0a, 0x12, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x54, 0x5f, 0x54, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x54, 0x54, 0x5f, 0x4d, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54, 0x5f,
	0x4f, 0x4b, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54, 0x5f, 0x50, 0x54, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x54, 0x5f, 0x57, 0x41, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54,
	0x5f, 0x52, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54, 0x5f, 0x50, 0x45, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x54, 0x5f, 0x49, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x54, 0x5f, 0x49, 0x47, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54, 0x5f, 0x53, 0x56,
	0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54, 0x5f, 0x43, 0x46, 0x10, 0x0a, 0x32, 0xa7, 0x01,
	0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x61, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x61, 0x6c,
	0x4a, 0x6f, 0x62, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x45, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x72, 0x69, 0x73, 0x6a, 0x61, 0x6e, 0x69, 0x73, 0x50,
	0x2f, 0x64, 0x65, 0x69, 0x6b, 0x73, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deikstra_proto_rawDescOnce sync.Once
	file_deikstra_proto_rawDescData = file_deikstra_proto_rawDesc
)

func file_deikstra_proto_rawDescGZIP() []byte {
	file_deikstra_proto_rawDescOnce.Do(func() {
		file_deikstra_proto_rawDescData = protoimpl.X.CompressGZIP(file_deikstra_proto_rawDescData)
	})
	return file_deikstra_proto_rawDescData
}

var file_deikstra_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_deikstra_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_deikstra_proto_goTypes = []interface{}{
	(TaskEvalStatusCode)(0), // 0: protofiles.TaskEvalStatusCode
	(TaskTestStatusCode)(0), // 1: protofiles.TaskTestStatusCode
	(*RegisterWorker)(nil),  // 2: protofiles.RegisterWorker
	(*TaskEvalJob)(nil),     // 3: protofiles.TaskEvalJob
	(*TaskEvalStatus)(nil),  // 4: protofiles.TaskEvalStatus
	(*TaskEvalResult)(nil),  // 5: protofiles.TaskEvalResult
	(*TaskTestResult)(nil),  // 6: protofiles.TaskTestResult
	(*ExecResult)(nil),      // 7: protofiles.ExecResult
	(*emptypb.Empty)(nil),   // 8: google.protobuf.Empty
}
var file_deikstra_proto_depIdxs = []int32{
	6, // 0: protofiles.TaskEvalStatus.test_res:type_name -> protofiles.TaskTestResult
	5, // 1: protofiles.TaskEvalStatus.task_res:type_name -> protofiles.TaskEvalResult
	0, // 2: protofiles.TaskEvalResult.eval_status:type_name -> protofiles.TaskEvalStatusCode
	1, // 3: protofiles.TaskTestResult.test_status:type_name -> protofiles.TaskTestStatusCode
	2, // 4: protofiles.Scheduler.GetTaskEvalJobs:input_type -> protofiles.RegisterWorker
	4, // 5: protofiles.Scheduler.ReportTaskEvalStatus:input_type -> protofiles.TaskEvalStatus
	3, // 6: protofiles.Scheduler.GetTaskEvalJobs:output_type -> protofiles.TaskEvalJob
	8, // 7: protofiles.Scheduler.ReportTaskEvalStatus:output_type -> google.protobuf.Empty
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_deikstra_proto_init() }
func file_deikstra_proto_init() {
	if File_deikstra_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deikstra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWorker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deikstra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEvalJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deikstra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEvalStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deikstra_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEvalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deikstra_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deikstra_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_deikstra_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TaskEvalStatus_TestRes)(nil),
		(*TaskEvalStatus_TaskRes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deikstra_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deikstra_proto_goTypes,
		DependencyIndexes: file_deikstra_proto_depIdxs,
		EnumInfos:         file_deikstra_proto_enumTypes,
		MessageInfos:      file_deikstra_proto_msgTypes,
	}.Build()
	File_deikstra_proto = out.File
	file_deikstra_proto_rawDesc = nil
	file_deikstra_proto_goTypes = nil
	file_deikstra_proto_depIdxs = nil
}
