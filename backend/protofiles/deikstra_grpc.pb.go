// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: deikstra.proto

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	GetTaskEvalJobs(ctx context.Context, in *RegisterWorker, opts ...grpc.CallOption) (Scheduler_GetTaskEvalJobsClient, error)
	ReportTaskEvalStatus(ctx context.Context, opts ...grpc.CallOption) (Scheduler_ReportTaskEvalStatusClient, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) GetTaskEvalJobs(ctx context.Context, in *RegisterWorker, opts ...grpc.CallOption) (Scheduler_GetTaskEvalJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[0], "/protofiles.Scheduler/GetTaskEvalJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerGetTaskEvalJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Scheduler_GetTaskEvalJobsClient interface {
	Recv() (*TaskEvalJob, error)
	grpc.ClientStream
}

type schedulerGetTaskEvalJobsClient struct {
	grpc.ClientStream
}

func (x *schedulerGetTaskEvalJobsClient) Recv() (*TaskEvalJob, error) {
	m := new(TaskEvalJob)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *schedulerClient) ReportTaskEvalStatus(ctx context.Context, opts ...grpc.CallOption) (Scheduler_ReportTaskEvalStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scheduler_ServiceDesc.Streams[1], "/protofiles.Scheduler/ReportTaskEvalStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerReportTaskEvalStatusClient{stream}
	return x, nil
}

type Scheduler_ReportTaskEvalStatusClient interface {
	Send(*TaskEvalStatus) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type schedulerReportTaskEvalStatusClient struct {
	grpc.ClientStream
}

func (x *schedulerReportTaskEvalStatusClient) Send(m *TaskEvalStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerReportTaskEvalStatusClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations must embed UnimplementedSchedulerServer
// for forward compatibility
type SchedulerServer interface {
	GetTaskEvalJobs(*RegisterWorker, Scheduler_GetTaskEvalJobsServer) error
	ReportTaskEvalStatus(Scheduler_ReportTaskEvalStatusServer) error
	mustEmbedUnimplementedSchedulerServer()
}

// UnimplementedSchedulerServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (UnimplementedSchedulerServer) GetTaskEvalJobs(*RegisterWorker, Scheduler_GetTaskEvalJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskEvalJobs not implemented")
}
func (UnimplementedSchedulerServer) ReportTaskEvalStatus(Scheduler_ReportTaskEvalStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method ReportTaskEvalStatus not implemented")
}
func (UnimplementedSchedulerServer) mustEmbedUnimplementedSchedulerServer() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_GetTaskEvalJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterWorker)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SchedulerServer).GetTaskEvalJobs(m, &schedulerGetTaskEvalJobsServer{stream})
}

type Scheduler_GetTaskEvalJobsServer interface {
	Send(*TaskEvalJob) error
	grpc.ServerStream
}

type schedulerGetTaskEvalJobsServer struct {
	grpc.ServerStream
}

func (x *schedulerGetTaskEvalJobsServer) Send(m *TaskEvalJob) error {
	return x.ServerStream.SendMsg(m)
}

func _Scheduler_ReportTaskEvalStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerServer).ReportTaskEvalStatus(&schedulerReportTaskEvalStatusServer{stream})
}

type Scheduler_ReportTaskEvalStatusServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*TaskEvalStatus, error)
	grpc.ServerStream
}

type schedulerReportTaskEvalStatusServer struct {
	grpc.ServerStream
}

func (x *schedulerReportTaskEvalStatusServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerReportTaskEvalStatusServer) Recv() (*TaskEvalStatus, error) {
	m := new(TaskEvalStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskEvalJobs",
			Handler:       _Scheduler_GetTaskEvalJobs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReportTaskEvalStatus",
			Handler:       _Scheduler_ReportTaskEvalStatus_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "deikstra.proto",
}
